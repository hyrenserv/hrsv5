// 定义全局变量。各子模块使用 rootProject.ext 引用
ext {
    currentDateTime = new Date().format("yyyy-MM-dd HH:mm:ssZ")
}

allprojects {
    //包组名称
    group 'hrds'  // 修改为本工程的真实 GroupId。必须要修改。后续每个子工程都应该使用这个前缀作为包的根
    //打包版本
    version '5.0'
    //显示打包时的警告,如果不需要显示 注释掉
//    gradle.projectsEvaluated {
//        tasks.withType(JavaCompile) {
//            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
//        }
//    }
}

subprojects {
    apply plugin: 'java'

    compileJava {
        sourceCompatibility = 8
        targetCompatibility = 8
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    compileTestJava {
        sourceCompatibility = 8
        targetCompatibility = 8
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    repositories {
        mavenLocal()
        maven { url 'http://172.168.0.61:18081/repository/hyren-maven-group/' }
//        maven { url 'http://139.9.126.19:38877/repository/hyren-maven-group/' }
    }

    configurations {
        provided
        //所有需要忽略的包定义在此
        //all*.exclude group: 'commons-httpclient'
        //all*.exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }

    //依赖配置
    configurations.all {
        //Transitive用于自动处理子依赖项。默认为true，gradle自动添加子依赖项，形成一个多层树形结构；设置为false，则需要手动添加每个依赖项。
//        transitive = false
    }

    //配置项目依赖信息
    dependencies {
        if (project.name == "hrds-commons") {
            compile fileTree(dir: "$rootDir/libs/runtime", include: ['*.jar'])
        }
        if (project.name != "hrds-commons") {
            compile project(':hrds-commons')
        }

        compile group: 'org.apache.hive', name: 'hive-storage-api', version: '2.6.0'
        compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
        compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.19.v20190610'
        compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.19.v20190610'
        compile group: 'org.eclipse.jetty', name: 'jetty-jmx', version: '9.4.19.v20190610'
        compile group: 'org.eclipse.jetty', name: 'jetty-security', version: '9.4.19.v20190610'
        compile group: 'org.eclipse.jetty', name: 'jetty-http', version: '9.4.19.v20190610'
        compile group: 'org.eclipse.jetty', name: 'jetty-io', version: '9.4.19.v20190610'
        compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.13.1'
        compile group: 'net.viktorc', name: 'pp4j', version: '2.2'
        compile group: 'com.univocity', name: 'univocity-parsers', version: '2.8.2'
        compile group: 'antlr', name: 'antlr', version: '2.7.7'
        compile group: 'net.java.dev.jna', name: 'jna', version: '3.2.5'
        compile group: 'org.mapdb', name: 'mapdb', version: '1.0.9'
        compile group: 'org.apache.xmlrpc', name: 'xmlrpc-common', version: '3.1.3'
        compile group: 'org.apache.xmlrpc', name: 'xmlrpc-client', version: '3.1.3'
        compile group: 'it.uniroma1.dis.wsngroup.gexf4j', name: 'gexf4j', version: '1.0.0'

        /** log */
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
        compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.2'

        /** columnar files */
        compile group: 'org.apache.parquet', name: 'parquet-column', version: '1.10.0'
        compile group: 'org.apache.parquet', name: 'parquet-hadoop', version: '1.10.0'
        compile group: 'org.apache.orc', name: 'orc-mapreduce', version: '1.5.2'

        /** apache commons */
        compile group: 'commons-io', name: 'commons-io', version: '2.6'
        compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
        compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.4.2'
        compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
        compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
        /** hadoop */
        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: '2.6.0-cdh5.16.2'
        compile group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: '2.6.0-cdh5.16.2'
        compile group: 'org.apache.hadoop', name: 'hadoop-yarn-client', version: '2.6.0-cdh5.16.2'

        /** hbase */
        compile group: 'org.apache.hbase', name: 'hbase-common', version: '1.2.0-cdh5.16.2'
        compile group: 'org.apache.hbase', name: 'hbase-client', version: '1.2.0-cdh5.16.2'
        compile group: 'org.apache.hbase', name: 'hbase-server', version: '1.2.0-cdh5.16.2'
        /** hive */
        compile group: 'org.apache.hive', name: 'hive-exec', version: '1.1.0-cdh5.16.2'
        compile group: 'org.apache.hive', name: 'hive-jdbc', version: '1.1.0-cdh5.16.2'
        /** solr */
        compile group: 'org.apache.solr', name: 'solr-solrj', version: '5.3.1'
        /** solr分词 */
        compile group: 'com.hankcs', name: 'hanlp', version: 'portable-1.2.8'
        /** spark */
        compile group: 'org.apache.spark', name: 'spark-sql_2.11', version: '2.3.2'
        provided group: 'org.apache.spark', name: 'spark-yarn_2.11', version: '2.3.2'

        /** database driver */
        compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.31'
        compile group: 'org.postgresql', name: 'postgresql', version: '42.2.6'
        compile group: 'com.oracle.database.jdbc', name: 'ojdbc8', version: '12.2.0.1'
        /** jdbc pool */
        compile group: 'com.zaxxer', name: 'HikariCP', version: '3.3.1'
        /** zip 解压缩 */
        compile group: 'net.lingala.zip4j', name: 'zip4j', version: '1.3.2'
        /** sql解析 */
        compile group: 'com.alibaba', name: 'druid', version: '1.2.3'
        /** json解析 */
        compile group: 'com.alibaba', name: 'fastjson', version: '1.2.72'
        /** office解析 */
        compile group: 'org.apache.poi', name: 'poi', version: '3.12'
        compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.12'
        compile group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '3.12'
        compile group: 'org.apache.poi', name: 'poi-scratchpad', version: '3.12'
        /** csv文件解析 */
        compile group: 'net.sf.supercsv', name: 'super-csv', version: '2.4.0'
        /** pdf文本提取 */
        compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.9'
        /** tess4j 图片文本提取 */
        compile(group: 'net.sourceforge.tess4j', name: 'tess4j', version: '3.4.7') {
            exclude group: 'ch.qos.logback'
            exclude group: 'org.slf4j'
        }
        /** 字符编码检测 */
        compile(group: 'net.sourceforge.jchardet', name: 'jchardet', version: '1.0') { transitive = false }
        /** 汉字转拼音 */
        compile group: 'com.belerweb', name: 'pinyin4j', version: '2.5.0'
        /** ssh2传输 */
        compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'
        /** 解析request请求头信息 UserAgentUtils获取请求信息*/
        compile group: 'eu.bitwalker', name: 'UserAgentUtils', version: '1.21'
        /** JVM内存级分布式缓存 */
        compile group: 'com.hazelcast', name: 'hazelcast', version: '3.12.8'
        /**算法相关*/
        compile group: 'com.google.guava', name: 'guava', version: '23.0'
        compile group: 'it.unimi.dsi', name: 'fastutil', version: '7.2.1'
        compile group: 'org.apache.lucene', name: 'lucene-core', version: '4.10.4'
        /**neo4j相关*/
        compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '4.2.0'
        /** 测试用例依赖相关包 */
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    }

    //-------------  模块打包  -------------
    //设置jar运行的MainClass
    def appMainClass = "${project.group}.main.AppMain"
    //设置打包目录 dist
    def distDir = "$rootDir/hyrenv5/hrsapp/dist"
    //设置web服务所需目录 java
    def javaDir = "$distDir/java"
    //processResources 发布时不需要将资源文件(resources)目录下的文件打包到jar包内 目的：不将resources打包到jar文件内
    processResources { exclude { "**/*.*" } }
    //创建项目jar包文件,编译项目为为.jar文件
    jar {
        //当前项目名
        String archivesBaseName = "${project.name}"
        //存放资源文件的目录
        String classpaths = 'resources/'
        //遍历项目的所有依赖的jar包赋值给变量someString
        configurations.runtime.each { classpaths = classpaths + " ../lib/" + it.name }
        //设置manifest
        if (project.name == "hrds-commons" || project.name == "hrds_H") {
            manifest {
                attributes(
                        "Implementation-Title": archivesBaseName,
                        "Implementation-Version": project.version,
                        'Built-By': System.getProperty('user.name'),
                        'Built-JDK': System.getProperty('java.version'),
                        'Source-Compatibility': project.sourceCompatibility,
                        'Target-Compatibility': project.targetCompatibility,
                        "Build-Time": rootProject.ext.currentDateTime
                )
            }
        } else {
            manifest {
                attributes(
                        'Main-Class': appMainClass,
                        'Class-Path': classpaths,
                        "Implementation-Title": archivesBaseName,
                        "Implementation-Version": project.version,
                        'Built-By': System.getProperty('user.name'),
                        'Built-JDK': System.getProperty('java.version'),
                        'Source-Compatibility': project.sourceCompatibility,
                        'Target-Compatibility': project.targetCompatibility,
                        "Build-Time": rootProject.ext.currentDateTime
                )
            }
        }
    }
    //create a directory, create it if it does not exist
    def createDir = {
        path ->
            File dir = new File(path)
            if (!dir.exists()) {
                dir.mkdirs()
            }
    }

    //copy the sql script to initialize the database
    task copySQLScript(type: Copy) {
        //设置数据库所需目录 database
        def databaseDir = "$distDir/database"
        if (project.name == "hrds-commons") {
            from "$rootDir/hrds-commons/src/main/java/hrds/commons/script"
            into "$databaseDir/postgresql/dbscript"
            include "*.sql"
        }
    }

    //copy global dependency jar
    task copyGlobalSharedJar(type: Copy, dependsOn: [jar, copySQLScript]) {
        if (project.name == "hrds-commons") {
            //拷贝运行依赖包
            from(configurations.runtime) {
                include("*.jar")
                into("jdklibs")
            }
            //拷贝hrds-commoms.jar
            from("$buildDir/libs") {
                include("*.jar")
                into("jdklibs")
            }
            into "$javaDir/GlobalShared"
        }
    }

    //Copy related files of subproject
    task copySubproject(type: Copy, dependsOn: [copyGlobalSharedJar]) {
        //设置当前项目名
        def appname = "${project.name}"
        //如果当前项目不是(hrds-commons,hrds_Trigger,hrds_Control,hrds_Agent),创建web项目目录
        if (project.name != "hrds-commons" && project.name != "hrds_Trigger"
                && project.name != "hrds_Control" && project.name != "hrds_Agent") {
            //获取项目名简称, hrds_A => A
            def appDirName = appname.replace("hrds_", "")
            //拷贝子项目jar文件到项目目录下
            from("$buildDir/libs") {
                include("*.jar")
                into(appDirName)
            }
            //拷贝资源文件到资源文件夹下
//            from("$projectDir/src/main/resources") {
//                include("**/*")
//                into appDirName + "/resources"
//            }
            into("$javaDir")
            //初始化项目下的目录
            def paths = ["$javaDir/" + appDirName + "/upfiles",
                         "$javaDir/" + appDirName + "/resources"]
            doFirst {
                paths.forEach(createDir)
            }
        }
    }

    //release
    task release(type: Copy, dependsOn: [copySubproject]) {}
}
